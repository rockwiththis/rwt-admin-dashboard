{"version":3,"file":"static/webpack/static/development/pages/signup.js.9d9926331e6f1bacad68.hot-update.js","sources":["webpack:///./api/auth/cognito.js"],"sourcesContent":["import {\n  CognitoUserPool,\n  AuthenticationDetails,\n  CognitoUser,\n  CognitoUserAttribute,\n} from 'amazon-cognito-identity-js';\n\nimport config from './config.js';\n// import tracker from './RequestTracker.js';\n\nconst userPool = new CognitoUserPool({\n  UserPoolId: config.cognito.USER_POOL_ID,\n  ClientId: config.cognito.APP_CLIENT_ID\n});\n\n// HELPERS\n\nexport function signUpNewUser({ username, email, password }) {\n  const authenticationData = { Username: username, Password: password }\n  const attributeList = []\n  const dataEmail = {\n    Name : 'email',\n    Value : email\n  }\n  const attributeEmail = new CognitoUserAttribute(dataEmail)\n  attributeList.push(attributeEmail)\n\n  userPool.signUp('username', 'password', attributeList, null, function(err, result){\n    if (err) {\n      alert(err.message || JSON.stringify(err))\n      return\n    }\n    cognitoUser = result.user\n    console.log('user name is ' + cognitoUser.getUsername())\n  });\n}\n\n\n/**\n * Signs in a user from authentication data, and returns a user token.\n *\n * @param      {string}   username  The username\n * @param      {string}   password  The password\n * @return     {Promise}  Promise resolving to user token\n */\nfunction createUserToken(username, password) {\n  const authenticationData = { Username: username, Password: password };\n  const user = new CognitoUser({ Username: username, Pool: userPool });\n  const authenticationDetails = new AuthenticationDetails(authenticationData);\n\n  return new Promise((resolve, reject) => (\n    user.authenticateUser(authenticationDetails, {\n      onSuccess: (result) => {\n        console.log('> createUserToken SUCCESS', result)\n        resolve(result.getIdToken().getJwtToken())\n      },\n      onFailure: (err) => reject('> createUserToken', err)\n    })\n  ));\n}\n\n/**\n * Gets user token from current authenticated user.\n *\n * @param      {Object}   currentUser  The current user\n * @return     {Promise}  Promise resolving to user token\n */\nfunction getUserToken(currentUser) {\n  return new Promise((resolve, reject) => {\n    currentUser.getSession(function(err, session) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(session.getIdToken().getJwtToken());\n    });\n  });\n}\n\n// EXPORTED\n\n/**\n * Attempts to grab current user from session and then fetch data for that\n * user. On failure passes errors to onError callback\n *\n * @param      {function}  onError  Callback run on error\n * @return     {Promise}   Promise which resolves to user data\n */\nexport async function getUserData(onError = (error) => { throw new Error(error); }) {\n  const currentUser = userPool.getCurrentUser();\n  if (!currentUser) return null;\n\n  try {\n    const token = await getUserToken(currentUser);\n    // const response = await tracker.requestIfHaventAlready({\n    //   path: `/current-user`\n    // }, token);\n    const response = null;\n\n    return Object.assign(response || {}, { token });\n  } catch (error) {\n    if (onError) onError(error);\n    return null;\n  }\n}\n\n/**\n * Grabs current user from session and signs them out.\n * @param {Function} onSignOut Callback run on signout success\n */\nexport function signOut(onSignOut) {\n  const currentUser = userPool.getCurrentUser();\n  if (currentUser !== null) {\n    currentUser.signOut();\n  }\n\n  if (typeof onSignOut === 'function') { onSignOut(); }\n}\n\n/**\n * Signs in a user from username and password\n *\n * @param      {string}    username   The username\n * @param      {string}    password   The password\n * @param      {Function}  onSuccess  Callback run on signin success\n */\nexport async function signIn(username, password, onSuccess) {\n  try {\n    await createUserToken(username, password);\n    const data = await getUserData();\n    if (onSuccess) { onSuccess(data); }\n  }\n  catch(error) {\n    console.log('>>> signIn error: ', error)\n  }\n}\n\n/**\n * Initiates a reset-password request\n *\n * @param      {string}   username  The username\n * @return     {Promise}  { description_of_the_return_value }\n */\nexport async function forgotPassword(username, onError, onVerify, onSuccess) {\n  const params = {\n    Pool: userPool,\n    Username: username\n  };\n\n  const cognitoUser = new CognitoUser(params);\n\n  cognitoUser.forgotPassword({\n    onFailure: (err) => { onError && onError(err); },\n    inputVerificationCode: (data) => { onVerify && onVerify(data); },\n    onSuccess: (data) => { onSuccess && onSuccess(data); }\n  });\n}\n\n/**\n * Resets a user's password using a verification code emailed to them.\n *\n * @param      {string}    username     The username\n * @param      {number}    code         The code\n * @param      {string}    newPassword  The new password\n * @param      {Function}  onError      On error\n * @param      {Function}  onSuccess    On success\n */\nexport function resetPassword(username, code, newPassword, onError, onSuccess) {\n  const params = {\n    Pool: userPool,\n    Username: username\n  };\n\n  const cognitoUser = new CognitoUser(params);\n\n  cognitoUser.confirmPassword(code, newPassword, {\n    onSuccess: (data) => { onSuccess && onSuccess(data); },\n    onFailure: (err) => { onError && onError(err); }\n  });\n}\n\n/**\n *\n *\n * @returns {Object} Current cognito user\n */\nexport function getCurrentUser() {\n  const userPool = new CognitoUserPool({\n    UserPoolId: config.cognito.USER_POOL_ID,\n    ClientId: config.cognito.APP_CLIENT_ID\n  });\n  return userPool.getCurrentUser();\n}\n\n/**\n * Gets access token from current authenticated user.\n *\n * @param      {Object}   currentUser  The current user\n * @return     {Promise}  Promise resolving to access token\n */\nexport function getAccessToken(currentUser) {\n  const cu = currentUser || getCurrentUser();\n  return new Promise((resolve, reject) => {\n    cu.getSession(function(err, session) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(session.getAccessToken().getJwtToken());\n    });\n  });\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAOA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AADA;AASA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;AAOA;AAAA;AAAA;AAkBA;;;;;;;;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AACA;AAZA;AAAA;AAAA;AAaA;AAbA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAsBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;;;;;;;;AAOA;AAAA;AAAA;AAWA;;;;;;;;;;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAiBA;AAAA;AAAA;AAeA;;;;;;;;;;;;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAwBA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAEA;;;;;;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}